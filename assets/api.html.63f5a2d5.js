import{_ as r,r as o,o as c,c as l,a,b as e,d as n,w as t,e as d}from"./app.f77be7dd.js";const p={},u=a("h1",{id:"api-远程控制",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#api-远程控制","aria-hidden":"true"},"#"),e(" API 远程控制")],-1),h={href:"https://grpc.io/",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"tag",-1),g=d(`<h2 id="apiobject" tabindex="-1"><a class="header-anchor" href="#apiobject" aria-hidden="true">#</a> ApiObject</h2><p><code>ApiObject</code> 对应配置文件的 <code>api</code> 项。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;services&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;HandlerService&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;LoggerService&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;StatsService&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>tag</code>: string</p></blockquote><p>出站代理标识。</p><blockquote><p><code>services</code>: [string]</p></blockquote><p>开启的 API 列表，可选的值见 <a href="#%E6%94%AF%E6%8C%81%E7%9A%84-api-%E5%88%97%E8%A1%A8">API 列表</a>。</p><h2 id="支持的-api-列表" tabindex="-1"><a class="header-anchor" href="#支持的-api-列表" aria-hidden="true">#</a> 支持的 API 列表</h2><h3 id="handlerservice" tabindex="-1"><a class="header-anchor" href="#handlerservice" aria-hidden="true">#</a> HandlerService</h3><p>一些对于入站出站代理进行修改的 API，可用的功能如下：</p><ul><li>添加一个新的入站代理；</li><li>添加一个新的出站代理；</li><li>删除一个现有的入站代理；</li><li>删除一个现有的出站代理；</li><li>在一个入站代理中添加一个用户（仅支持 VMess、VLESS、Trojan）；</li><li>在一个入站代理中删除一个用户（仅支持 VMess、VLESS、Trojan）；</li></ul><h3 id="loggerservice" tabindex="-1"><a class="header-anchor" href="#loggerservice" aria-hidden="true">#</a> LoggerService</h3><p>支持对内置 Logger 的重启，可配合 logrotate 进行一些对日志文件的操作。</p><h3 id="statsservice" tabindex="-1"><a class="header-anchor" href="#statsservice" aria-hidden="true">#</a> StatsService</h3>`,14),b=a("h3",{id:"observatoryservice",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#observatoryservice","aria-hidden":"true"},"#"),e(" ObservatoryService")],-1);function _(k,f){const i=o("ExternalLinkIcon"),s=o("RouterLink");return c(),l("div",null,[u,a("p",null,[e("V2Ray 中可以开放一些 API 以便远程调用。这些 API 都基于 "),a("a",h,[e("gRPC"),n(i)]),e("。大多数用户并不会用到此 API，新手可以直接忽略这一项。")]),a("p",null,[e("当远程控制开启时，V2Ray 会自建一个出站代理，以 "),v,e(" 配置的值为标识。用户必须手动将所有的 gRPC 入站连接通过 "),n(s,{to:"/config/routing.html"},{default:t(()=>[e("路由")]),_:1}),e(" 指向这一出站代理。")]),g,a("p",null,[e("内置的数据统计服务，详见 "),n(s,{to:"/config/stats.html"},{default:t(()=>[e("统计信息")]),_:1}),e("。")]),b,a("p",null,[n(s,{to:"/config/observatory.html"},{default:t(()=>[e("连接观测")]),_:1}),e(" 组件 API (v4.38.0+) 。")])])}const q=r(p,[["render",_],["__file","api.html.vue"]]);export{q as default};
