import{_ as d,r as t,o as i,c as p,a as e,d as a,w as s,b as o,e as c}from"./app.f77be7dd.js";const r={},u=c(`<h1 id="命令行参数" tabindex="-1"><a class="header-anchor" href="#命令行参数" aria-hidden="true">#</a> 命令行参数</h1><h2 id="v2ray" tabindex="-1"><a class="header-anchor" href="#v2ray" aria-hidden="true">#</a> V2Ray</h2><p>V2Ray 的程序文件的命令行参数如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray <span class="token punctuation">[</span>-version<span class="token punctuation">]</span> <span class="token punctuation">[</span>-test<span class="token punctuation">]</span> <span class="token punctuation">[</span>-config<span class="token operator">=</span>config.json<span class="token punctuation">]</span> <span class="token punctuation">[</span>-format<span class="token operator">=</span>json<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>-version</code></p></blockquote><p>只输出当前版本然后退出，不运行 V2Ray 主程序。</p><blockquote><p><code>-test</code></p></blockquote><p>测试配置文件有效性，如果有问题则输出错误信息，不运行 V2Ray 主程序。</p><blockquote><p><code>-config</code></p></blockquote><p>配置文件路径，可选的形式如下:</p><ul><li>本地路径，可以是一个绝对路径，或者相对路径。</li><li><code>&quot;stdin:&quot;</code>: 表示将从标准输入读取配置文件内容，调用者必须在输入完毕后关闭标准输入流。</li><li>以<code>http://</code>或<code>https://</code>(均为小写)开头: V2Ray 将尝试从这个远程地址加载配置文件。</li></ul><blockquote><p><code>-format</code></p></blockquote><p>配置文件格式，可选的值有：</p><ul><li><code>json</code>: JSON 格式；</li><li><code>pb</code> 或 <code>protobuf</code>: Protobuf 格式；</li></ul>`,14),h={class:"custom-container tip"},v=e("p",{class:"custom-container-title"},"TIP",-1),b=e("p",null,[o("当"),e("code",null,"-config"),o("没有指定时，V2Ray 将先后尝试从以下路径加载"),e("code",null,"config.json"),o(":")],-1),k=e("li",null,"工作目录（Working Directory）",-1),f=e("code",null,"v2ray.location.asset",-1),g=c(`<h2 id="v2ctl" tabindex="-1"><a class="header-anchor" href="#v2ctl" aria-hidden="true">#</a> V2Ctl</h2><p>V2Ctl 是一个集合，它有若干个子命令组成。全局的命令行形式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ctl <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>options<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>command</code></p></blockquote><p>子命令，有以下选项:</p><ul><li><code>api</code>: 调用 V2Ray 进程的远程控制指令。</li><li><code>config</code>: 从标准输入读取 JSON 格式的配置，然后从标准输出打印 Protobuf 格式的配置。</li><li><code>cert</code>: 生成 TLS 证书。</li><li><code>fetch</code>: 抓取远程文件。</li><li><code>tlsping</code>: (V2Ray 4.17+) 尝试进行 TLS 握手。</li><li><code>verify</code>: 验证文件是否由 Project V 官方签名。</li><li><code>uuid</code>: 输出一个随机的 UUID。</li></ul><h3 id="v2ctl-api" tabindex="-1"><a class="header-anchor" href="#v2ctl-api" aria-hidden="true">#</a> V2Ctl Api</h3><p><code>v2ctl api [--server=127.0.0.1:8080] &lt;Service.Method&gt; &lt;Request&gt;</code></p><p>调用 V2Ray 进程的远程控制指令。示例：</p><p><code>v2ctl api --server=127.0.0.1:8080 LoggerService.RestartLogger &#39;&#39;</code></p><h3 id="v2ctl-config" tabindex="-1"><a class="header-anchor" href="#v2ctl-config" aria-hidden="true">#</a> V2Ctl Config</h3><p><code>v2ctl config</code></p><p>此命令没有参数。它从标准输入读取 JSON 格式的配置，然后从标准输出打印 Protobuf 格式的配置。</p><h3 id="v2ctl-cert" tabindex="-1"><a class="header-anchor" href="#v2ctl-cert" aria-hidden="true">#</a> V2Ctl Cert</h3><p><code>v2ctl cert [--ca] [--domain=v2ray.com] [--expire=240h] [--name=&quot;V2Ray Inc&quot;] [--org=&quot;V2Ray Inc] [--json] [--file=v2ray]</code></p><p>生成一个 TLS 证书。</p><blockquote><p><code>--ca</code></p></blockquote><p>如果指定此选项，将会生成一个 CA 证书。</p><blockquote><p><code>--domain</code></p></blockquote><p>证书的 Subject Alternative Name(SAN) 项。该参数可以多次使用，来指定多个域名。比如<code>--domain=v2ray.com --domain=v2ray.cool</code>。</p><blockquote><p><code>--expire</code></p></blockquote>`,21),m={href:"https://golang.org/pkg/time/#ParseDuration",target:"_blank",rel:"noopener noreferrer"},q=c('<blockquote><p><code>--name</code></p></blockquote><p>证书的 Common Name(CN) 项。</p><blockquote><p><code>--org</code></p></blockquote><p>证书的 Orgnization 项。</p><blockquote><p><code>--json</code></p></blockquote><p>将生成的证书以 V2Ray 支持的 JSON 格式输出到标准输出。默认开启。</p><blockquote><p><code>--file</code></p></blockquote><p>将证书以 PEM 格式输出到文件。当指定时，将会生成证书与密钥两个文件。示例：当键入 <code>--file=a</code> 时，将生成 <code>a_cert.pem</code> 和 <code>a_key.pem</code> 两个文件。</p><h3 id="v2ctl-fetch" tabindex="-1"><a class="header-anchor" href="#v2ctl-fetch" aria-hidden="true">#</a> V2Ctl Fetch</h3><p><code>v2ctl fetch &lt;url&gt;</code></p><p>抓取指定的 URL 的内容并输出，只支持 HTTP 和 HTTPS。</p><h3 id="v2ctl-tlsping" tabindex="-1"><a class="header-anchor" href="#v2ctl-tlsping" aria-hidden="true">#</a> V2Ctl TlsPing</h3><p><code>v2ctl tlsping &lt;domain&gt; --ip=[ip]</code></p><p>向指定的域名发起 TLS 握手。</p><blockquote><p>domain</p></blockquote><p>目标域名</p><blockquote><p>--ip</p></blockquote><p>此域名的 IP 地址。如果未指定此参数，V2Ctl 将使用系统的 DNS 进行域名解析。</p><h3 id="v2ctl-verify" tabindex="-1"><a class="header-anchor" href="#v2ctl-verify" aria-hidden="true">#</a> V2Ctl Verify</h3><p><code>v2ctl verify [--sig=/path/to/sigfile] &lt;filepath&gt;</code></p><p>此命令用于验证文件是否由 Project V 官方签名。</p><blockquote><p><code>--sig</code></p></blockquote><p>签名文件路径，默认值为待验证文件加入&#39;.sig&#39;后缀。</p><blockquote><p><code>filepath</code></p></blockquote><p>待验证文件路径。</p><h3 id="v2ctl-uuid" tabindex="-1"><a class="header-anchor" href="#v2ctl-uuid" aria-hidden="true">#</a> V2Ctl UUID</h3><p><code>v2ctl uuid</code></p><p>此命令没有参数。每次运行都会输出一个新的 UUID。</p>',28);function _(V,y){const n=t("RouterLink"),l=t("ExternalLinkIcon");return i(),p("div",null,[u,e("div",h,[v,b,e("ul",null,[k,e("li",null,[a(n,{to:"/config/env.html"},{default:s(()=>[o("环境变量")]),_:1}),o("中"),f,o("所指定的路径")])])]),g,e("p",null,[o("证书有效期。格式为 Golang 的"),e("a",m,[o("时间长度"),a(l)]),o("。")]),q])}const C=d(r,[["render",_],["__file","command.html.vue"]]);export{C as default};
