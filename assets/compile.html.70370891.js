import{_ as o,r as l,o as r,c as t,a as e,b as a,d as n,e as i}from"./app.227ece11.js";const c={},d=e("h1",{id:"第一步-学会编译",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第一步-学会编译","aria-hidden":"true"},"#"),a(" 第一步：学会编译")],-1),p=e("h2",{id:"前序工作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前序工作","aria-hidden":"true"},"#"),a(" 前序工作")],-1),u={href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"},b={href:"https://golang.google.cn/doc/install",target:"_blank",rel:"noopener noreferrer"},g=i(`<h2 id="多种构建方式" tabindex="-1"><a class="header-anchor" href="#多种构建方式" aria-hidden="true">#</a> 多种构建方式</h2><h3 id="拉取-v2ray-源代码和依赖" tabindex="-1"><a class="header-anchor" href="#拉取-v2ray-源代码和依赖" aria-hidden="true">#</a> 拉取 V2Ray 源代码和依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/v2fly/v2ray-core.git
<span class="token builtin class-name">cd</span> v2ray-core <span class="token operator">&amp;&amp;</span> go mod download
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在无法正常访问 Google 的网络环境，依赖无法被正常拉取，需要先设置 <code>GOPROXY</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="手工构建" tabindex="-1"><a class="header-anchor" href="#手工构建" aria-hidden="true">#</a> 手工构建</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>本小节的命令需要在 V2Ray 项目根目录内运行。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ray <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> ./main
<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ctl <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> <span class="token parameter variable">-tags</span> confonly ./infra/control/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上命令会在当前用户的 <code>$HOME</code> 目录下生成刚构建的 <code>v2ray</code>、<code>v2ctl</code> 可执行文件，即可正常使用。</p><p>构建其他 CPU 架构、其他系统（Windows/macOS）的可执行文件，属于 Golang 的交叉编译流程，主要是控制 <code>GOOS</code> / <code>GOARCH</code> 两个环境变量，详情请参阅 Golang 相关文档。</p><p>下面演示如何构建可运行在 Windows 64 位系统的 <code>v2ray.exe</code>、<code>wv2ray.exe</code>、<code>v2ctl.exe</code> 可执行文件（非 Windows 系统不需要编译 <code>wv2ray.exe</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ray.exe <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> ./main
<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/wv2ray.exe <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -H windowsgui -buildid=&quot;</span> ./main
<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ctl.exe <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> <span class="token parameter variable">-tags</span> confonly ./infra/control/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>go tool dist list</code> 查看所有支持的系统与架构。某些架构还需要控制其它环境变量，如 <code>arm</code> 的 <code>GOARM</code>，用于设置运行时 CPU 浮点协处理器的版本。</p><h3 id="脚本构建" tabindex="-1"><a class="header-anchor" href="#脚本构建" aria-hidden="true">#</a> 脚本构建</h3><p>以上手工构建的只是 v2ray 可执行程序本身，发行包内还包含了地址库（<code>geoip.dat</code>、<code>geosite.dat</code>）、配置文件等其他文件。使用打包脚本可方便地制作出适用于多种操作系统、多种 CPU 架构的发布包。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://raw.githubusercontent.com/v2fly/v2ray-core/master/release/user-package.sh
<span class="token function">chmod</span> <span class="token number">755</span> user-package.sh
./user-package.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接执行以上脚本即可在当前目录生成适用于 64 位 linux 操作系统的可执行文件，文件名类似于 <code>v2ray-custom-linux-amd64-20201008-104530.zip</code>，即为发布包。</p><p>你还可以使用一些个性化参数来定制发布包：</p><ul><li><code>windows</code> 构建 Windows 版本的发布包</li><li><code>darwin</code> 构建 darwin（macOS）版本的发布包</li><li><code>tgz</code> 发布包使用 <code>tar.gz</code> 格式</li><li><code>386</code> 构建 32 位可执行文件</li><li><code>arm</code> 构建适用于 arm 架构 CPU 的可执行文件</li><li><code>mips</code> 构建适合于 mips 架构 CPU 的可执行文件，请参阅 Golang 交叉编译文档</li><li><code>nodat</code> 不包含域名/IP 数据库 <code>geoip.dat</code>、<code>geosite.dat</code>（可以减小发布包的大小）</li><li><code>noconf</code> 不包含范例 JSON、Systemd/Systemv 等配置文件</li><li><code>nosource</code> 不要从远端拉取 V2Ray 源代码（此选项适用于本地已有 V2Ray 源代码的情况。运行脚本前必须先进入到本地 v2ray 代码根目录）</li></ul><p>以上参数没有次序要求，只需要按需传给脚本。下面以构建一个适用于 32 位 Windows 操作系统、不带地址库、不带样例配置的发布包为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./user-package.sh windows <span class="token number">386</span> nodat noconf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>脚本构建的 v2ray，其启动信息会变成用户编译的时间，以做区分：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>V2Ray <span class="token number">4.30</span>.0 <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token number">20201008</span>-104530
A unified platform <span class="token keyword">for</span> anti-censorship.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用户还可自定义 <code>codename</code>，定制属于自己的版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./user-package.sh windows <span class="token number">386</span> nodat noconf <span class="token assign-left variable">codename</span><span class="token operator">=</span>custom-codename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25);function h(k,f){const s=l("ExternalLinkIcon");return r(),t("div",null,[d,p,e("p",null,[a("V2Ray 使用 "),e("a",u,[a("Golang"),n(s)]),a(" 作为主要编程语言，团队发布流程上使用 "),e("a",v,[a("GitHub Actions"),n(s)]),a(" 作为构建工具。推荐使用 Linux 或 macOS 进行开发，少量的脚本可能无法在 Windows 上正常运行。")]),e("ul",null,[e("li",null,[a("安装 Golang: "),e("a",m,[a("golang.org/doc/install"),n(s)]),a("（若无法访问，可选择"),e("a",b,[a("国内镜像"),n(s)]),a("）")])]),g])}const w=o(c,[["render",h],["__file","compile.html.vue"]]);export{w as default};
