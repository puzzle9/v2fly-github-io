import{_ as o,r as t,o as i,c as r,a,b as n,d as e,e as l}from"./app.5a12ac33.js";const c={},d=a("h1",{id:"the-first-step-learn-to-compile",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#the-first-step-learn-to-compile","aria-hidden":"true"},"#"),e(" The first step: learn to compile")],-1),p=a("h2",{id:"pre-work",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#pre-work","aria-hidden":"true"},"#"),e(" Pre-work")],-1),u=e("V2Ray uses "),m={href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"},h=e("Golang"),b=e(" as the main programming language, and the team release process uses "),v={href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"},g=e("GitHub Actions"),f=e(" as the build tool. It is recommended to use Linux or macOS for development. A small amount of scripts may not run properly on Windows."),k=e("Install Golang: "),w={href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"},y=e("golang.org/doc/install"),_=e(" (If you can\u2019t access it, you can choose "),x={href:"https://golang.google.cn/doc/install",target:"_blank",rel:"noopener noreferrer"},O=e("Domestic Mirror"),G=e(")"),E=l(`<h2 id="multiple-build-methods" tabindex="-1"><a class="header-anchor" href="#multiple-build-methods" aria-hidden="true">#</a> Multiple build methods</h2><h3 id="pull-v2ray-source-code-and-dependencies" tabindex="-1"><a class="header-anchor" href="#pull-v2ray-source-code-and-dependencies" aria-hidden="true">#</a> Pull V2Ray source code and dependencies</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/v2fly/v2ray-core.git
<span class="token builtin class-name">cd</span> v2ray-core <span class="token operator">&amp;&amp;</span> go mod download
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: In the network environment where Google cannot be accessed normally, and dependencies cannot be pulled normally, you need to set <code>GOPROXY</code> first:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="manual-build" tabindex="-1"><a class="header-anchor" href="#manual-build" aria-hidden="true">#</a> Manual build</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The commands in this section need to be run in the root directory of the V2Ray project.</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ray <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> ./main
<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ctl <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> <span class="token parameter variable">-tags</span> confonly ./infra/control/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Running the above command will generate the newly-built <code>v2ray</code> and <code>v2ctl</code> executable files in the current user&#39;s <code>$HOME</code> directory, which can be used normally.</p><p>Building executable files for other CPU architectures and other systems (Windows/macOS) belongs to the cross-compilation process of Golang, which mainly controls the two environment variables <code>GOOS</code> / <code>GOARCH</code>. For details, please refer to Golang related documents.</p><p>The following demonstrates how to build executable files of <code>v2ray.exe</code>, <code>wv2ray.exe</code>, and <code>v2ctl.exe</code> that can run on Windows 64-bit systems (non-Windows systems do not need to compile <code>wv2ray.exe</code>):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ray.exe <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> ./main
<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/wv2ray.exe <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -H windowsgui -buildid=&quot;</span> ./main
<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token environment constant">$HOME</span>/v2ctl.exe <span class="token parameter variable">-trimpath</span> <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-s -w -buildid=&quot;</span> <span class="token parameter variable">-tags</span> confonly ./infra/control/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Execute <code>go tool dist list</code> to view all supported systems and architectures. Some architectures also need to control other environment variables, such as the <code>GOARM</code> of <code>arm</code>, which is used to set the version of the CPU floating-point coprocessor at runtime.</p><h3 id="script-build" tabindex="-1"><a class="header-anchor" href="#script-build" aria-hidden="true">#</a> Script build</h3><p>The above manual construction is only the v2ray executable program itself. The distribution package also contains address libraries (<code>geoip.dat</code>, <code>geosite.dat</code>), configuration files and other files. Using packaging scripts can easily produce release packages suitable for multiple operating systems and multiple CPU architectures.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">wget</span> https://raw.githubusercontent.com/v2fly/v2ray-core/master/release/user-package.sh
<span class="token function">chmod</span> <span class="token number">755</span> user-package.sh
./user-package.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Execute the above script directly to generate an executable file suitable for 64-bit linux operating system in the current directory. The file name is similar to <code>v2ray-custom-linux-amd64-20201008-104530.zip</code>, which is the release package.</p><p>You can also use some personalized parameters to customize the release package:</p><ul><li><code>windows</code> build a release package for the Windows version</li><li><code>darwin</code> build the release package of darwin (macOS) version</li><li><code>tgz</code> release package uses <code>tar.gz</code> format</li><li><code>386</code> Build a 32-bit executable</li><li><code>arm</code> build executable file suitable for arm architecture CPU</li><li><code>mips</code> build executable files suitable for mips architecture CPU, please refer to Golang cross-compilation document</li><li><code>nodat</code> does not include domain name/IP database <code>geoip.dat</code>, <code>geosite.dat</code> (can reduce the size of the release package)</li><li><code>noconf</code> does not include example JSON, Systemd/Systemv and other configuration files</li><li><code>nosource</code> Do not pull the V2Ray source code from the remote end (this option is suitable for the situation where the V2Ray source code is available locally. You must enter the local v2ray code root directory before running the script)</li></ul><p>The above parameters have no order requirements, only need to be passed to the script as needed. The following is an example of building a release package suitable for 32-bit Windows operating system, without address library and without sample configuration:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./user-package.sh windows <span class="token number">386</span> nodat noconf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For the v2ray built by the script, the startup information will become the time when the user was compiled to distinguish:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>V2Ray <span class="token number">4.30</span>.0 <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token number">20201008</span>-104530
A unified platform <span class="token keyword">for</span> anti-censorship.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Users can also customize the <code>codename</code> to customize their own version:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./user-package.sh windows <span class="token number">386</span> nodat noconf <span class="token assign-left variable">codename</span><span class="token operator">=</span>custom-codename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25);function C(R,A){const s=t("ExternalLinkIcon");return i(),r("div",null,[d,p,a("p",null,[u,a("a",m,[h,n(s)]),b,a("a",v,[g,n(s)]),f]),a("ul",null,[a("li",null,[k,a("a",w,[y,n(s)]),_,a("a",x,[O,n(s)]),G])]),E])}const H=o(c,[["render",C],["__file","compile.html.vue"]]);export{H as default};
