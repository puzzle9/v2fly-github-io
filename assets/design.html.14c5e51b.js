import{_ as i}from"./arch.c1da8eb0.js";import{_ as h,r as o,o as s,c as d,a as e,b as r,d as a,w as l,e as c}from"./app.defb07fa.js";const _={},u=c('<h1 id="第二步-了解架构" tabindex="-1"><a class="header-anchor" href="#第二步-了解架构" aria-hidden="true">#</a> 第二步：了解架构</h1><p>本文描述了 V2Ray 内核（v2ray-core）的设计思路。</p><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h2><ul><li>V2Ray 内核提供了一个平台，支持必要的网络代理功能，在其之上可以进行二次开发，以提供更好的用户体验；</li><li>以跨平台为首要原则，以减少二次开发的成本；</li></ul><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><p><img src="'+i+'" alt="Architecture"></p><p>内核分为三层：应用层、代理层和传输层。每一层内包含数个模块，模块间互相独立，同类型的模块可无缝替换。</p><h2 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h2><p>应用层包含一些代理层中常用的功能，这些功能被抽象出来，以便在不同的代理模块中复用。应用层的模块应为纯软件实现，与硬件或平台相关的技术无关。</p><p>重要模块列表：</p>',10),p=e("li",null,"Dispatcher: 用于把入站代理所接收到的数据，传送给出站代理；",-1),f=e("li",null,"DNS: 内置的 DNS 缓存；",-1),x=e("li",null,"Proxy Manager: 入站代理的管理器；",-1),b=e("h2",{id:"代理层",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#代理层","aria-hidden":"true"},"#"),r(" 代理层")],-1),m=e("p",null,"代理层分为两部分：入站代理（Inbound Proxy）和出站代理（Outbound Proxy）。两部分相互独立，入站代理不依赖于某个特定的出站代理，反之亦然。",-1),y=e("h3",{id:"入站代理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#入站代理","aria-hidden":"true"},"#"),r(" 入站代理")],-1),g={href:"https://github.com/v2fly/v2ray-core/blob/master/proxy/proxy.go",target:"_blank",rel:"noopener noreferrer"},k=e("h3",{id:"出站代理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#出站代理","aria-hidden":"true"},"#"),r(" 出站代理")],-1),v={href:"https://github.com/v2fly/v2ray-core/blob/master/proxy/proxy.go",target:"_blank",rel:"noopener noreferrer"},N=e("h2",{id:"传输层",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#传输层","aria-hidden":"true"},"#"),r(" 传输层")],-1),V=e("p",null,"传输层提供一些网络数据传输相关的工具模块。",-1);function R(I,L){const n=o("RouterLink"),t=o("ExternalLinkIcon");return s(),d("div",null,[u,e("ul",null,[p,e("li",null,[r("Router: 内置路由，详见 "),a(n,{to:"/config/routing.html"},{default:l(()=>[r("路由配置")]),_:1}),r("；")]),f,x]),b,m,y,e("ul",null,[e("li",null,[r("实现 "),e("a",g,[r("proxy.Inbound"),a(t)]),r(" 接口；")])]),k,e("ul",null,[e("li",null,[r("实现 "),e("a",v,[r("proxy.Outbound"),a(t)]),r(" 接口；")])]),N,V])}const E=h(_,[["render",R],["__file","design.html.vue"]]);export{E as default};
