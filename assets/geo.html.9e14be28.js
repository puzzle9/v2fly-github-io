import{_ as a,r,o as n,c as i,a as e,b as o,d,e as c}from"./app.227ece11.js";const l={},s=c('<h1 id="geo" tabindex="-1"><a class="header-anchor" href="#geo" aria-hidden="true">#</a> Geo</h1><h2 id="geoip" tabindex="-1"><a class="header-anchor" href="#geoip" aria-hidden="true">#</a> GeoIP</h2><blockquote><p><code>cidr</code> : <a href="#CIDRObject">CIDRObject</a></p></blockquote>',3),p={href:"https://zh.wikipedia.org/zh-hans/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1",target:"_blank",rel:"noopener noreferrer"},h=c("<blockquote><p><code>inverseMatch</code> : true | false</p></blockquote><p>反向匹配，当此项为 <code>true</code> 时，如果匹配则返回 <code>false</code>，否则返回 <code>true</code>。</p><blockquote><p><code>code</code>: string</p></blockquote>",3),u={href:"https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%9C%B0%E5%8D%80%E4%BB%A3%E7%A2%BC",target:"_blank",rel:"noopener noreferrer"},b=c('<blockquote><p><code>filePath</code>: string</p></blockquote><p>GeoIP 文件路径。</p><h3 id="cidrobject" tabindex="-1"><a class="header-anchor" href="#cidrobject" aria-hidden="true">#</a> CIDRObject</h3><blockquote><p><code>ipAddr</code>: string</p></blockquote><p>IP 地址。</p><blockquote><p><code>prefix</code>: number</p></blockquote><p>CIDR 地址前缀。</p><h2 id="geodomain" tabindex="-1"><a class="header-anchor" href="#geodomain" aria-hidden="true">#</a> GeoDomain</h2><blockquote><p><code>domain</code> : <a href="#DomainObject">DomainObject</a></p></blockquote><blockquote><p><code>code</code>: string</p></blockquote>',10),m={href:"https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%9C%B0%E5%8D%80%E4%BB%A3%E7%A2%BC",target:"_blank",rel:"noopener noreferrer"},g=c('<blockquote><p><code>filePath</code>: string</p></blockquote><p>GeoDomain 文件路径。</p><h3 id="domainobject" tabindex="-1"><a class="header-anchor" href="#domainobject" aria-hidden="true">#</a> DomainObject</h3><blockquote><p><code>type</code> : &quot;Plain&quot; | &quot;Regex&quot; | &quot;RootDomain&quot; | &quot;Full&quot;</p></blockquote><p>域名匹配模式，可选值为：</p><ul><li><strong>Plain</strong>：纯字符串匹配模式，当匹配目标域名中任意部分时，该规则生效。比如 <code>sina.com</code> 可以匹配 <code>sina.com</code>、<code>sina.com.cn</code>、<code>sina.company</code> 和 <code>www.sina.com</code>，但不匹配 <code>sina.cn</code>。</li><li><strong>Regex</strong>：正则表达式匹配模式，当正则表达式匹配目标域名时，该规则生效。例如 <code>\\.goo.*\\.com$</code> 匹配 <code>www.google.com</code>、<code>fonts.googleapis.com</code>，但不匹配 <code>google.com</code>。</li><li><strong>RootDomain</strong>：根域名匹配模式，当域名是目标域名或其子域名时，该规则生效。例如 <code>v2ray.com</code> 匹配 <code>www.v2ray.com</code>、<code>v2ray.com</code>，但不匹配 <code>xv2ray.com</code>。</li><li><strong>Full</strong>：完整匹配模式，当域名完整匹配目标域名时，该规则生效。例如 <code>v2ray.com</code> 匹配 <code>v2ray.com</code> 但不匹配 <code>www.v2ray.com</code>。</li></ul><blockquote><p><code>value</code>: string</p></blockquote><p>匹配域名的值。</p>',8);function k(_,q){const t=r("ExternalLinkIcon");return n(),i("div",null,[s,e("p",null,[o("一个数组，数组中每一项是一个 "),e("a",p,[o("CIDR"),d(t)]),o(" 地址块")]),h,e("p",null,[o("GeoIP 的双字符"),e("a",u,[o("国家或地区代码"),d(t)]),o("，支持所有可以上网的国家和地区。")]),b,e("p",null,[o("GeoDomain 的双字符"),e("a",m,[o("国家或地区代码"),d(t)]),o("，支持所有可以上网的国家和地区。")]),g])}const E=a(l,[["render",k],["__file","geo.html.vue"]]);export{E as default};
