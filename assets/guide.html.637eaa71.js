import{_ as d,r as n,o,c as h,a as e,b as a,d as r,e as l}from"./app.6e0baea8.js";const t={},s=l('<h1 id="第三步-开始开发" tabindex="-1"><a class="header-anchor" href="#第三步-开始开发" aria-hidden="true">#</a> 第三步：开始开发</h1><h2 id="基本" tabindex="-1"><a class="header-anchor" href="#基本" aria-hidden="true">#</a> 基本</h2><h3 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制" aria-hidden="true">#</a> 版本控制</h3><p>Git</p><h3 id="分支-branch" tabindex="-1"><a class="header-anchor" href="#分支-branch" aria-hidden="true">#</a> 分支（Branch）</h3><p>本项目只使用一个分支，即 master 。所有更改全部提交进 master，并确保 master 在任一时刻都是可编译可使用的。</p><h3 id="发布-release" tabindex="-1"><a class="header-anchor" href="#发布-release" aria-hidden="true">#</a> 发布（Release）</h3><p>尽量使用自动化工具发布，比如 v2ray-core 使用 GitHub Actions 作为自动编译和发布工具。</p><h3 id="引用其它项目" tabindex="-1"><a class="header-anchor" href="#引用其它项目" aria-hidden="true">#</a> 引用其它项目</h3><ul><li>Golang <ul><li>产品代码建议使用 Golang 标准库和 <code>golang.org/x/</code> 下的库；</li><li>如需引用其它项目，请事先创建 issue 讨论；</li></ul></li><li>其它 <ul><li>只要不违反双方的协议（本项目为 MIT），且对项目有帮助的工具，都可以使用。</li></ul></li></ul><h2 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程" aria-hidden="true">#</a> 开发流程</h2><h3 id="写代码之前" tabindex="-1"><a class="header-anchor" href="#写代码之前" aria-hidden="true">#</a> 写代码之前</h3><p>发现任何问题，或对项目有任何想法，请创建 Issue 讨论以减少重复劳动和消耗在代码上的时间。</p><h3 id="修改代码" tabindex="-1"><a class="header-anchor" href="#修改代码" aria-hidden="true">#</a> 修改代码</h3>',14),c={href:"https://golang.org/doc/effective_go.html",target:"_blank",rel:"noopener noreferrer"},u=l("<li>每一次 push 之前，请在项目根目录运行：<code>go generate format.go</code>；</li><li>每一次 push 之前，请确保测试通过：<code>go test ./...</code>；</li><li>若修改了 proto 文件，则需要重新生成 <code>pb.go</code> 文件，请在项目根目录运行：<code>go generate proto.go</code>；</li><li>提交 pull request 之前，请确保新增代码有超过 70% 的代码覆盖率（code coverage）；</li>",4),g=e("li",null,[a("其它 "),e("ul",null,[e("li",null,"请注意代码的可读性。")])],-1),b=l(`<h3 id="pull-request" tabindex="-1"><a class="header-anchor" href="#pull-request" aria-hidden="true">#</a> Pull Request</h3><ul><li>提交 PR 之前，请先运行 <code>git pull https://github.com/v2fly/v2ray-core.git</code> 以确保 merge 可顺利进行；</li><li>一个 PR 只做一件事，如有对多个 bug 的修复，请对每一个 bug 提交一个 PR；</li><li>由于 Golang 的特殊需求（Package path），Go 项目的 PR 流程和其它项目有所不同： <ol><li>先 Fork 本项目，创建自己的 <code>github.com/your/v2ray-core</code> 仓库；</li><li>克隆自己的 v2ray 仓库到本地：<code>git clone https://github.com/your/v2ray-core.git</code>；</li><li>基于 <code>master</code> 分支创建新的分支；</li><li>在自行创建的分支上作修改并提交修改(commit)；</li><li>在推送(push)修改完成的分支到自己的仓库前，先切换到 <code>master</code> 分支，运行 <code>git pull https://github.com/v2fly/v2ray-core.git</code> 拉取最新的远端代码；</li><li>如果上一步拉取得到了新的远端代码，则切换到之前自己创建的分支，运行 <code>git rebase master</code> 执行分支合并操作。如遇到文件冲突，则需要解决冲突；</li><li>上一步处理完毕后，就可以把自己创建的分支推送到自己的仓库：<code>git push -u origin your-branch</code></li><li>最后，把自己仓库的新推送的分支往 <code>v2fly/v2ray-core</code> 的 <code>master</code> 分支发 PR 即可；</li><li>请在 PR 的标题和正文中，完整表述此次 PR 解决的问题 / 新增的功能 / 代码所做的修改的用意等；</li><li>耐心等待开发者的回应。</li></ol></li></ul><h3 id="对代码的修改" tabindex="-1"><a class="header-anchor" href="#对代码的修改" aria-hidden="true">#</a> 对代码的修改</h3><h4 id="功能性问题" tabindex="-1"><a class="header-anchor" href="#功能性问题" aria-hidden="true">#</a> 功能性问题</h4><p>请提交至少一个测试用例（Test Case）来验证对现有功能的改动。</p><h4 id="性能相关" tabindex="-1"><a class="header-anchor" href="#性能相关" aria-hidden="true">#</a> 性能相关</h4><p>请提交必要的测试数据来证明现有代码的性能缺陷，或是新增代码的性能提升。</p><h4 id="新功能" tabindex="-1"><a class="header-anchor" href="#新功能" aria-hidden="true">#</a> 新功能</h4><ul><li>如果新增功能对已有功能不影响，请提供可以开启/关闭的开关（如 flag），并使新功能保持默认关闭的状态；</li><li>大型新功能（比如增加一个新的协议）开发之前，请先提交一个 issue，讨论完毕之后再进行开发。</li></ul><h4 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h4><p>视具体情况而定。</p><h2 id="v2ray-编码规范" tabindex="-1"><a class="header-anchor" href="#v2ray-编码规范" aria-hidden="true">#</a> V2Ray 编码规范</h2><p>以下内容适用于 V2Ray 中的 Golang 代码。</p><h3 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构" aria-hidden="true">#</a> 代码结构</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray-core
├── app        // 应用模块
│   ├── router // 路由
├── common     // 公用代码
├── proxy      // 通讯协议
│   ├── blackhole
│   ├── dokodemo-door
│   ├── freedom
│   ├── socks
│   ├── vmess
├── transport  // 传输模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编码规范" tabindex="-1"><a class="header-anchor" href="#编码规范" aria-hidden="true">#</a> 编码规范</h3><p>基本与 Golang 官方所推荐做法一致，有一些例外。写在这里以方便大家熟悉 Golang。</p><h4 id="命名" tabindex="-1"><a class="header-anchor" href="#命名" aria-hidden="true">#</a> 命名</h4>`,18),p=e("li",null,[a("文件和目录名尽量使用单个英文单词，比如 hello.go； "),e("ul",null,[e("li",null,"如果实在没办法，则目录使用连接线／文件名使用下划线连接两个（或多个单词），比如 hello-world/hello_again.go；"),e("li",null,"测试代码使用 _test.go 结尾；")])],-1),v=e("li",null,[a("类型使用 Pascal 命名法，比如 ConnectionHandler； "),e("ul",null,[e("li",null,"对缩写不强制小写，即 HTML 不必写成 Html；")])],-1),_=e("li",null,"公开成员变量也使用 Pascal 命名法；",-1),m={href:"https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"privateAttribute",-1),x=e("li",null,[a("为了方便重构，方法建议全部使用 Pascal 命名法； "),e("ul",null,[e("li",null,[a("完全私有的类型放入 "),e("code",null,"internal"),a(" 。")])])],-1),y=e("h4",{id:"内容组织",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内容组织","aria-hidden":"true"},"#"),a(" 内容组织")],-1),k=e("ul",null,[e("li",null,"一个文件包含一个主要类型，及其相关的私有函数等；"),e("li",null,"测试相关的文件，如 Mock 等工具类，放入 testing 子目录。")],-1);function P(G,R){const i=n("ExternalLinkIcon");return o(),h("div",null,[s,e("ul",null,[e("li",null,[a("Golang "),e("ul",null,[e("li",null,[a("请参考 "),e("a",c,[a("Effective Go"),r(i)]),a("；")]),u])]),g]),b,e("ul",null,[p,v,_,e("li",null,[a("私有成员变量使用 "),e("a",m,[a("小驼峰式命名法"),r(i)]),a(" ，如 "),f,a(" ；")]),x]),y,k])}const B=d(t,[["render",P],["__file","guide.html.vue"]]);export{B as default};
