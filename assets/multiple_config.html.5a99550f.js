import{_ as o,r as t,o as p,c as i,a as s,b as n,d as l,w as c,e as a}from"./app.defb07fa.js";const r={},u=a(`<h1 id="多文件配置" tabindex="-1"><a class="header-anchor" href="#多文件配置" aria-hidden="true">#</a> 多文件配置</h1><p>自版本 <code>4.23.0</code> 起，V2Ray 程序支持使用多个配置文件。</p><p>多配置文件的主要作用在于分散不同作用模块配置，便于管理和维护。该功能主要考虑是为了丰富 V2Ray 的生态链，比如对于 GUI 的客户端，一般只实现节点选择等固定的功能，对于太复杂的配置难以图形化实现；只需留一个 <code>confdir</code> 的自定义配置目录供配置复杂的功能；对于服务器的部署脚本，只需往 <code>confdir</code> 添加文件即可实现配置多种协议，等等。</p><h2 id="多文件启动信息例子" tabindex="-1"><a class="header-anchor" href="#多文件启动信息例子" aria-hidden="true">#</a> 多文件启动信息例子</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>启动信息中会提示依次读入的每个配置文件，留意启动信息是否符合你预设的顺序。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ v2ray <span class="token parameter variable">-c</span> v2ray.json <span class="token parameter variable">-c</span> 00_base.json <span class="token parameter variable">-c</span> 01_info.json <span class="token parameter variable">-c</span> 02_log.json <span class="token parameter variable">-c</span> outbound.json
V2Ray v4.23.0-version <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token number">20200311</span>-000000 <span class="token punctuation">(</span>go1.13.8 linux/mipsle<span class="token punctuation">)</span>
A unified platform <span class="token keyword">for</span> anti-censorship.
<span class="token number">2020</span>/03/22 <span class="token number">18</span>:40:00 <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> v2ray.com/core/common/platform/ctlcmd: <span class="token operator">&lt;</span>v2ctl message<span class="token operator">&gt;</span>
v2ctl<span class="token operator">&gt;</span> Read config:  00_base.json
v2ctl<span class="token operator">&gt;</span> Read config:  01_info.json
v2ctl<span class="token operator">&gt;</span> Read config:  02_log.json
v2ctl<span class="token operator">&gt;</span> Read config:  outbound.json
v2ctl<span class="token operator">&gt;</span> <span class="token punctuation">[</span> outbound.json <span class="token punctuation">]</span> updated outbound with tag:  proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用法说明" tabindex="-1"><a class="header-anchor" href="#用法说明" aria-hidden="true">#</a> 用法说明</h2><p>命令行的 <code>-config</code> 可以多次指定。（也可以简写为 <code>-c</code> ，完全等效。）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray <span class="token parameter variable">-config</span> base.json <span class="token parameter variable">-config</span> cf1.json <span class="token parameter variable">-c</span> cf2.json <span class="token parameter variable">-c</span> cf3.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者用 <code>-confdir</code> 参数指定一个目录，程序会按文件名顺序读取目录内的 <code>.json</code> 文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray <span class="token parameter variable">-confdir</span> /etc/v2ray/confs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可组合使用。（注意，目录内的配置级别作用在 <code>-config</code> 参数后，不管 <code>-confdir</code> 参数的位置）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray <span class="token parameter variable">-c</span> cf1.json <span class="token parameter variable">-c</span> cf2.json <span class="token parameter variable">-confdir</span> /etc/v2ray/confs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),d=s("code",null,"v2ray.location.confdir",-1),v=s("code",null,"V2RAY_LOCATION_CONFDIR",-1),k=s("code",null,"confdir",-1),b=s("code",null,"-confdir",-1),m=a(`<h2 id="规则说明" tabindex="-1"><a class="header-anchor" href="#规则说明" aria-hidden="true">#</a> 规则说明</h2><h4 id="普通对象" tabindex="-1"><a class="header-anchor" href="#普通对象" aria-hidden="true">#</a> 普通对象（<code>{}</code>）</h4><p><strong>在 json 的顶级对象当中，后者覆盖或补充前者。</strong></p><p>比如：</p><ul><li>base.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;log&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dns&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;stats&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;policy&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;transport&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;routing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>outbounds.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;outbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以多配置启动 V2Ray：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray <span class="token parameter variable">-c</span> base.json <span class="token parameter variable">-c</span> outbounds.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这两个配置文件就等效于合并的整体配置文件。当需要修改出口节点，只需要修改 <code>outbounds.json</code> 内容。</p><p>如果需要改变日志 log 的级别，无需改动 <code>base.json</code>，只需后续增加一个配置：</p><ul><li>debuglog.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;log&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;loglevel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;debug&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动时放置在 base 后，即可输出 debug 级别的日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>v2ray <span class="token parameter variable">-c</span> base.json <span class="token parameter variable">-c</span> outbounds.json <span class="token parameter variable">-c</span> debuglog.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组（<code>[]</code>）</h4><p>在 json 配置中的<code>inbounds</code>和<code>outbounds</code>是数组结构，他们有特殊的规则：</p><ul><li>当配置中的数组元素有 2 或以上，覆盖前者的 inbounds/outbounds；</li><li>当配置中的数组元素只有 1 个时，查找原有<code>tag</code>相同的元素进行覆盖；若无法找到： <ul><li>对于 inbounds，添加至最后（inbounds 内元素顺序无关）</li><li>对于 outbounds，添加至最前（outbounds 默认首选出口）；但如果文件名含有 tail（大小写均可），添加至最后。</li></ul></li></ul><p>借助多配置，可以很方便为原有的配置添加不同协议的 inbound，而不必修改原有配置。</p><p>以下例子不是有效配置，只为展示上述规则。</p><ul><li>000.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;socks&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span><span class="token string">&quot;socks&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">1234</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>001.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span><span class="token string">&quot;http&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>002.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;socks&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span><span class="token string">&quot;socks&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">4321</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三个配置将会合成为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;socks&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span><span class="token string">&quot;socks&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">4321</span> <span class="token comment">// &lt;--- 002顺序在000后，因此覆盖tag为socks的inbound端口为4321</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span><span class="token string">&quot;http&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="推荐的多文件列表" tabindex="-1"><a class="header-anchor" href="#推荐的多文件列表" aria-hidden="true">#</a> 推荐的多文件列表</h2><p>执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">BASE</span> <span class="token keyword">in</span> 00_log 01_api 02_dns 03_routing 04_policy 05_inbounds 06_outbounds 07_transport 08_stats 09_reverse<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">&#39;{}&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;/etc/v2ray/<span class="token variable">$BASE</span>.json&quot;</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">BASE</span> <span class="token keyword">in</span> 00_log 01_api 02_dns 03_routing 04_policy 05_inbounds 06_outbounds 07_transport 08_stats 09_reverse<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">&#39;{}&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;/usr/local/etc/v2ray/<span class="token variable">$BASE</span>.json&quot;</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── 00_log.json
├── 01_api.json
├── 02_dns.json
├── 03_routing.json
├── 04_policy.json
├── 05_inbounds.json
├── 06_outbounds.json
├── 07_transport.json
├── 08_stats.json
└── 09_reverse.json

<span class="token number">0</span> directories, <span class="token number">10</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function g(h,q){const e=t("RouterLink");return p(),i("div",null,[u,s("p",null,[n("也可使用 "),l(e,{to:"/config/env.html#%E5%A4%9A%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95"},{default:c(()=>[n("环境变量")]),_:1}),n(),d,n(" 或 "),v,n(" 指定 "),k,n("。参数 "),b,n(" 的作用优先于环境变量，如果参数指定了有效的目录则不再读取环境变量中的路径。")]),m])}const j=o(r,[["render",g],["__file","multiple_config.html.vue"]]);export{j as default};
