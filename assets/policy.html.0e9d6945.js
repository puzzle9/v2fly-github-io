import{_ as e,o,c,e as t}from"./app.48ab8264.js";const d={},l=t('<h1 id="policy-本地策略" tabindex="-1"><a class="header-anchor" href="#policy-本地策略" aria-hidden="true">#</a> Policy 本地策略</h1><p>本地策略可以配置信息统计、内部缓存大小和一些用户相关的权限。V2Ray 处理的每一个连接都对应一个用户，按照用户的等级（level）应用不同的策略。本地策略可根据等级的不同而变化。</p><p>service.policy</p><h2 id="policy" tabindex="-1"><a class="header-anchor" href="#policy" aria-hidden="true">#</a> Policy</h2><blockquote><p><code>system</code>: <a href="#SystemPolicyObject">SystemPolicyObject</a></p></blockquote><p>V2Ray 全局系统策略。</p><blockquote><p><code>level</code>: map{string: <a href="#PolicyObject">PolicyObject</a>}</p></blockquote><p>一组键值对，每个键是一个字符串形式的数字（JSON 的要求），比如 &quot;0&quot;、&quot;1&quot; 等，双引号不能省略，此数字对应用户等级。每一个值是一个 <a href="#PolicyObject">PolicyObject</a>。</p><h3 id="systempolicyobject" tabindex="-1"><a class="header-anchor" href="#systempolicyobject" aria-hidden="true">#</a> SystemPolicyObject</h3><blockquote><p><code>stats</code>: <a href="#StatsObject">StatsObject</a></p></blockquote><p>统计信息设置。</p><h3 id="statsobject" tabindex="-1"><a class="header-anchor" href="#statsobject" aria-hidden="true">#</a> StatsObject</h3><blockquote><p><code>inboundUplink</code>: bool</p></blockquote><p>当值为 <code>true</code> 时，开启所有入站代理的上行流量统计。</p><blockquote><p><code>inboundDownlink</code>: bool</p></blockquote><p>当值为 <code>true</code> 时，开启所有入站代理的下行流量统计。</p><blockquote><p><code>outboundUplink</code>: bool</p></blockquote><p>当值为 <code>true</code> 时，开启所有出站代理的上行流量统计。</p><blockquote><p><code>outboundDownlink</code>: bool</p></blockquote><p>当值为 <code>true</code> 时，开启所有出站代理的下行流量统计。</p><h3 id="policyobject" tabindex="-1"><a class="header-anchor" href="#policyobject" aria-hidden="true">#</a> PolicyObject</h3><blockquote><p><code>timeout</code>: <a href="#TimeoutPolicyObject">TimeoutPolicyObject</a></p></blockquote><p>超时策略。</p><blockquote><p><code>stats</code>: <a href="#PolicyStatsObject">PolicyStatsObject</a></p></blockquote><p>统计信息策略。</p><blockquote><p><code>buffer</code>: <a href="#BufferPolicyObject">BufferPolicyObject</a></p></blockquote><p>内部缓存策略。</p><h3 id="timeoutpolicyobject" tabindex="-1"><a class="header-anchor" href="#timeoutpolicyobject" aria-hidden="true">#</a> TimeoutPolicyObject</h3><blockquote><p><code>handshake</code>: number</p></blockquote><p>连接建立时的握手时间限制。单位为秒。默认值为 <code>4</code>。在入站代理处理一个新连接时，在握手阶段（比如 VMess 读取头部数据，判断目标服务器地址），如果使用的时间超过这个时间，则中断该连接。</p><blockquote><p><code>connectionIdle</code>: number</p></blockquote><p>连接空闲的时间限制。单位为秒。默认值为 <code>300</code>。在入站出站代理处理一个连接时，如果在 <code>connIdle</code> 时间内，没有任何数据被传输（包括上行和下行数据），则中断该连接。</p><blockquote><p><code>uplinkOnly</code>: number</p></blockquote><p>当连接下行线路关闭后的时间限制。单位为秒。默认值为 <code>2</code>。当服务器（如远端网站）关闭下行连接时，出站代理会在等待 <code>uplinkOnly</code> 时间后中断连接。</p><blockquote><p><code>downlinkOnly</code>: number</p></blockquote><p>当连接上行线路关闭后的时间限制。单位为秒。默认值为 <code>5</code>。当客户端（如浏览器）关闭上行连接时，入站代理会在等待 <code>downlinkOnly</code> 时间后中断连接。</p><h3 id="policystatsobject" tabindex="-1"><a class="header-anchor" href="#policystatsobject" aria-hidden="true">#</a> PolicyStatsObject</h3><blockquote><p><code>userUplink</code>: bool</p></blockquote><p>当值为 <code>true</code> 时，开启当前等级的所有用户的上行流量统计。</p><blockquote><p><code>userDownlink</code>: bool</p></blockquote><p>当值为 <code>true</code> 时，开启当前等级的所有用户的下行流量统计。</p><h3 id="bufferpolicyobject" tabindex="-1"><a class="header-anchor" href="#bufferpolicyobject" aria-hidden="true">#</a> BufferPolicyObject</h3><blockquote><p><code>connection</code>: number</p></blockquote><p>每个连接的内部缓存大小，单位为 Bytes。 当值为 <code>-1</code> 时，缓存大小无限。</p>',44),a=[l];function p(i,b){return o(),c("div",null,a)}const r=e(d,[["render",p],["__file","policy.html.vue"]]);export{r as default};
