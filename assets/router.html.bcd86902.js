import{_ as s,r as l,o as u,c as p,a as o,b as e,d as n,w as a,e as c}from"./app.6e0baea8.js";const d={},i=c(`<h1 id="router-路由" tabindex="-1"><a class="header-anchor" href="#router-路由" aria-hidden="true">#</a> Router 路由</h1><p>service.router</p><p>V2Ray 内建了一个路由模块，可以将入站数据按需求由不同的出站连接发出，以达到按需代理的目的。这一功能的常见用法是分流国内外流量。V2Ray 可以通过内部机制判断不同国家或地区的流量，然后将它们发送到不同的出站代理。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;domainStrategy&quot;</span><span class="token operator">:</span><span class="token string">&quot;AsIs&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rule&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;balancingRule&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>domainStrategy</code>: <code>AsIs</code> | <code>UseIp</code> | <code>IpIfNonMatch</code> | <code>IpOnDemand</code></p></blockquote><ul><li><code>AsIs</code>：只使用域名进行路由选择，默认值；</li><li><code>IpIfNonMatch</code>：当域名没有匹配任何基于域名的规则时，将域名解析成 IP（A 记录或 AAAA 记录），进行基于 IP 规则的匹配； <ul><li>当一个域名有多个 IP 地址时，会尝试匹配所有的 IP 地址，直到其中一个与某个 IP 规则匹配为止；</li><li>解析后的 IP 仅在路由选择时起作用，转发的数据包中依然使用原始域名。</li></ul></li><li><code>IpOnDemand</code>：当匹配时碰到任何基于 IP 的规则，立即将域名解析为 IP 进行匹配。</li></ul><blockquote><p><code>rule</code>: [ <a href="#RuleObject">RuleObject</a> ]</p></blockquote><p>对应一个数组，数组中每一项是一个规则。对于每一个连接，路由将根据这些规则依次进行判断，当一个规则生效时，即将这个连接转发至它所指定的 <code>outboundTag</code> 或 <code>balancingTag</code>。当没有匹配到任何规则时，流量默认被转发至第一个 <code>outbound</code>。</p><blockquote><p><code>balancingRule</code>: [ <a href="#BalancingRuleObject">BalancingRuleObject</a> ]</p></blockquote><p>一个数组，数组中每一项是一个负载均衡器的配置。当一个规则指向一个负载均衡器时，V2Ray 会通过此负载均衡器选出一个 <code>outbound</code>，然后由它转发流量。</p><h2 id="ruleobject" tabindex="-1"><a class="header-anchor" href="#ruleobject" aria-hidden="true">#</a> RuleObject</h2><blockquote><p><code>tag</code>: string</p></blockquote>`,12),r=o("blockquote",null,[o("p",null,[o("code",null,"balancingTag"),e(": string")])],-1),q=o("p",null,[e("对应一个负载均衡器的标识。"),o("code",null,"balancerTag"),e(" 和 "),o("code",null,"tag"),e(" 须二选一。当同时指定时，"),o("code",null,"tag"),e(" 生效。")],-1),b=o("code",null,"domain",-1),k=o("p",null,"当匹配目标域名时，此规则生效。",-1),g=o("code",null,"geoDomain",-1),h=o("p",null,"当匹配目标域名时，此规则生效。",-1),m=o("code",null,"geoip",-1),v=c("<p>当匹配目标 IP 时，此规则生效。</p><blockquote><p><code>portList</code>: string</p></blockquote><p>目标端口范围，有三种形式：</p><ul><li><code>a-b</code>：a 和 b 均为正整数，且小于 65536。这个范围是一个前后闭合区间，当端口落在此范围内时，此规则生效。</li><li><code>a</code>：a 为正整数，且小于 65536。当目标端口为 a 时，此规则生效。</li><li>以上两种形式的混合，以逗号 &quot;,&quot; 分隔。形如：<code>53,443,1000-2000</code>。</li></ul><blockquote><p><code>networks</code>: &quot;tcp&quot; | &quot;udp&quot; | &quot;tcp,udp&quot;</p></blockquote><p>可选的值有 &quot;tcp&quot;、&quot;udp&quot; 或 &quot;tcp,udp&quot;，当连接方式是指定的方式时，此规则生效。</p>",6),_=o("code",null,"sourceGeoip",-1),f=c(`<p>当匹配来源 IP 时，此规则生效。</p><blockquote><p><code>sourcePortList</code>: string</p></blockquote><p>来源端口范围，格式与 <code>portList</code> 相同。</p><blockquote><p><code>userEmail</code>: [ string ]</p></blockquote><p>一个数组，数组内每一项是一个邮箱地址。当某一项匹配来源用户时，此规则生效。</p><blockquote><p><code>inboundTag</code>: [ string ]</p></blockquote><p>一个数组，数组内每一项是一个标识。当某一项匹配入站协议的标识时，此规则生效。</p><blockquote><p><code>protocol</code>: [ &quot;http&quot; | &quot;tls&quot; | &quot;bittorrent&quot; ]</p></blockquote><p>一个数组，数组内每一项表示一种协议。当某一个协议匹配当前连接的流量时，此规则生效。必须开启入站代理中的 <code>sniffing</code> 选项。</p><blockquote><p><code>domainMatcher</code>: &quot;linear&quot; | &quot;mph&quot;</p></blockquote><p>选择要使用的域名匹配算法。</p><ul><li><code>linear</code>：使用线性匹配算法，默认值；</li><li><code>mph</code>：使用最小完美散列（minimal perfect hash）算法。 <ul><li>测试数据约 17 万条，匹配速度提升约 30%，内存占用减少约 15%</li></ul></li></ul><blockquote><p><code>geoDomain</code> :</p></blockquote><h2 id="balancingruleobject" tabindex="-1"><a class="header-anchor" href="#balancingruleobject" aria-hidden="true">#</a> BalancingRuleObject</h2><p>负载均衡器配置。当一个负载均衡器生效时，它会从指定的出站协议中，按配置选出一个最合适的出站协议，进行流量转发。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;balancer&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;selector&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;strategy&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;random&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>tag</code>: string</p></blockquote><p>此负载均衡器的标识，用于匹配 <code>RuleObject</code> 中的 <code>balancerTag</code>。</p><blockquote><p><code>outboundSelector</code>: [ string ]</p></blockquote><p>一个字符串数组，其中每一个字符串将用于和出站协议标识的前缀匹配。在以下几个出站协议标识中：<code>[ &quot;a&quot;, &quot;ab&quot;, &quot;c&quot;, &quot;ba&quot; ]</code>，<code>&quot;outboundSelector&quot;: [&quot;a&quot;]</code> 将匹配到 <code>[ &quot;a&quot;, &quot;ab&quot; ]</code>。</p><blockquote><p><code>strategy</code>: &quot;random&quot; | &quot;leastping&quot; | &quot;leastload&quot;</p></blockquote><p>进行负载均衡的策略类型。</p><p>可以填入的类型包括 <code>random</code> 、<code>leastping</code> 以及 <code>leastload</code>。</p><blockquote><p>strategySettings: <a href="#StrategySettingsObject">StrategySettingsObject</a></p></blockquote><blockquote><p>fallbackTag: string</p></blockquote><h3 id="strategysettingsobject" tabindex="-1"><a class="header-anchor" href="#strategysettingsobject" aria-hidden="true">#</a> StrategySettingsObject</h3>`,26);function j(I,y){const t=l("RouterLink");return u(),p("div",null,[i,o("p",null,[e("对应一个额外 "),n(t,{to:"/v5/config/outbounds.html"},{default:a(()=>[e("出站连接配置")]),_:1}),e(" 的标识。")]),r,q,o("blockquote",null,[o("p",null,[b,e(": [ "),n(t,{to:"/v5/config/geo.html#DomainObject"},{default:a(()=>[e("DomainObject")]),_:1}),e(" ]")])]),k,o("blockquote",null,[o("p",null,[g,e(": [ "),n(t,{to:"/v5/config/geo.html#GeoDomain"},{default:a(()=>[e("GeoDomain")]),_:1}),e(" ]")])]),h,o("blockquote",null,[o("p",null,[m,e(" : [ "),n(t,{to:"/v5/config/geo.html#GeoIP"},{default:a(()=>[e("GeoIP")]),_:1}),e(" ]")])]),v,o("blockquote",null,[o("p",null,[_,e(": [ "),n(t,{to:"/v5/config/geo.html#GeoIP"},{default:a(()=>[e("GeoIP")]),_:1}),e(" ]")])]),f])}const R=s(d,[["render",j],["__file","router.html.vue"]]);export{R as default};
