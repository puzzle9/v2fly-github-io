import{_ as o,o as e,c,e as n}from"./app.5a12ac33.js";const s={},t=n('<h1 id="socks" tabindex="-1"><a class="header-anchor" href="#socks" aria-hidden="true">#</a> Socks</h1><p>Socks Protocol can be used to exchange proxied traffic with other applications.</p><h2 id="socks-inbound" tabindex="-1"><a class="header-anchor" href="#socks-inbound" aria-hidden="true">#</a> Socks Inbound</h2><ul><li>Name: <code>socks</code></li><li>Type: Inbound Protocol</li><li>ID: <code>inbound.socks</code></li></ul><blockquote><p><code>address</code> : string</p></blockquote><p>The server address for the purpose of UDP communication.</p><blockquote><p><code>udpEnabled</code>: true | false</p></blockquote><p>Is UDP support enabled.</p><blockquote><p><code>packetEncoding</code>: [&quot;None&quot; | &quot;Packet&quot;]</p></blockquote><p>UDP packet encoding method\uFF0C<code>None</code> by default\u3002</p><p>When this value is <code>None</code> , UDP connections will be split into streams based on their destination (Address and Port-Dependent Mapping)\u3002</p><p>When this value is <code>Packet</code>, UDP connections from a single source connection will be encoded as UDP packet addr connection, which will be restored to its original form by a supported outbound as an Endpoint Independent Mapping UDP connection. This UDP behaviour is also known as FullCone or NAT1.</p><h2 id="socks-outbound" tabindex="-1"><a class="header-anchor" href="#socks-outbound" aria-hidden="true">#</a> Socks Outbound</h2><ul><li>Name: <code>socks</code></li><li>Type: Outbound Protocol</li><li>ID: <code>outbound.socks</code></li></ul><blockquote><p><code>address</code>: string</p></blockquote><p>The server address.</p><blockquote><p><code>port</code>: number</p></blockquote><p>The server port.</p>',18),d=[t];function a(i,r){return e(),c("div",null,d)}const u=o(s,[["render",a],["__file","socks.html.vue"]]);export{u as default};
