import{_ as i,r as l,o as p,c as u,f as r,a as e,d as t,w as s,b as o,e as c}from"./app.dda88656.js";const d={},k=c(`<h1 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h1><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;transport&quot;</span><span class="token operator">:</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;transportSettings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;security&quot;</span><span class="token operator">:</span><span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;securitySettings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>transport</code>: name of <code>&lt;transport&gt;</code></p></blockquote><p>传输层协议名称。</p><blockquote><p><code>transportSettings</code>: settings of <code>&lt;transport&gt;</code></p></blockquote><p>传输层协议设置。</p><blockquote><p><code>security</code>: name of <code>&lt;security&gt;</code></p></blockquote>`,7),q=e("blockquote",null,[e("p",null,[e("code",null,"securitySettings"),o(": settings of "),e("code",null,"<security>")])],-1),_=e("blockquote",null,[e("p",null,[e("code",null,"socketSettings"),o(": "),e("a",{href:"#SocketConfigObject"},"SocketConfigObject")])],-1),b=e("h2",{id:"支持的传输流协议",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#支持的传输流协议","aria-hidden":"true"},"#"),o(" 支持的传输流协议")],-1),h=c(`<h2 id="tls" tabindex="-1"><a class="header-anchor" href="#tls" aria-hidden="true">#</a> TLS</h2><p>security.tls</p><blockquote><p><code>serverName</code>: string</p></blockquote><p>指定服务器端证书的域名，在连接由 IP 建立时有用。当目标连接由域名指定时，比如在 Socks 入站时接收到了域名，或者由 Sniffing 功能探测出了域名，这个域名会自动用于 <code>serverName</code>，无须手动配置。</p><blockquote><p><code>nextProtocol</code> : [string]</p></blockquote><p>一个字符串数组，指定了 TLS 握手时指定的 ALPN 数值。默认值为 <code>[&quot;h2&quot;, &quot;http/1.1&quot;]</code>。</p><blockquote><p><code>disableSystemRoot</code>: true | false</p></blockquote><p>是否禁用操作系统自带的 CA 证书。默认值为 <code>false</code>。当值为 <code>true</code> 时，V2Ray 只会使用 <code>certificates</code> 中指定的证书进行 TLS 握手。当值为 <code>false</code> 时，V2Ray 只会使用操作系统自带的 CA 证书进行 TLS 握手。</p><blockquote><p><code>pinnedPeerCertificateChainSha256</code> : [string]</p></blockquote><p>使用 Base64 标准编码格式表示的远程服务器的证书链的SHA256散列值。在设置后，远程服务器的证书链的散列值必须为列表中的数值之一。</p><p>在连接因为此策略失败时，会展示此证书链散列。不建议使用这种方式获得证书链散列值，因为在这种情况下您没有机会验证此时服务器提供的证书是否为真实证书。</p><blockquote><p><code>certificate</code>: <a href="#CertificateObject">CertificateObject</a></p></blockquote><h3 id="certificateobject" tabindex="-1"><a class="header-anchor" href="#certificateobject" aria-hidden="true">#</a> CertificateObject</h3><blockquote><p><code>usage</code> : string</p></blockquote><p>证书用途，默认值为 <code>&quot;ENCIPHERMENT&quot;</code>。</p><ul><li><code>&quot;ENCIPHERMENT&quot;</code>: 证书用于 TLS 认证和加密。</li><li><code>&quot;AUTHORITY_VERIFY&quot;</code>: 证书用于验证远端 TLS 的证书。当使用此项时，当前证书必须为 CA 证书。</li><li><code>&quot;AUTHORITY_VERIFY_CLIENT&quot;</code>: 用于验证客户端身份的证书颁发机构证书。当使用此项时，当前证书必须为 CA 证书。</li><li><code>&quot;AUTHORITY_ISSUE&quot;</code>: 证书用于签发其它证书。当使用此项时，当前证书必须为 CA 证书。</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>当有新的客户端请求时，假设所指定的 <code>serverName</code> 为 <code>&quot;v2ray.com&quot;</code>，V2Ray 会先从证书列表中寻找可用于 <code>&quot;v2ray.com&quot;</code> 的证书，如果没有找到，则使用任一 <code>usage</code> 为 <code>&quot;issue&quot;</code> 的证书签发一个适用于 <code>&quot;v2ray.com&quot;</code> 的证书，有效期为一小时。并将新的证书加入证书列表，以供后续使用。</p></div><blockquote><p><code>Certificate</code>: string</p></blockquote><p>PEM 格式的证书。</p><blockquote><p><code>Key</code>: string</p></blockquote><p>PEM 格式的私钥。</p><blockquote><p><code>certificateFile</code>: string</p></blockquote><p>证书文件路径，如使用 OpenSSL 生成，后缀名为 .crt。</p><blockquote><p><code>keyFile</code>: string</p></blockquote><p>密钥文件路径，如使用 OpenSSL 生成，后缀名为 .key。目前暂不支持需要密码的 key 文件。</p><h2 id="socketconfigobject" tabindex="-1"><a class="header-anchor" href="#socketconfigobject" aria-hidden="true">#</a> SocketConfigObject</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;mark&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tcpFastOpen&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tproxy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tcpKeepAliveInterval&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>mark</code>: number</p></blockquote><p>一个整数。当其值非零时，在出站连接上标记 SO_MARK。</p><ul><li>仅适用于 Linux 系统。</li><li>需要 CAP_NET_ADMIN 权限。</li></ul><blockquote><p><code>tcpFastOpen</code>: true | false</p></blockquote>`,31),m={href:"https://zh.wikipedia.org/wiki/TCP%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"true",-1),v=e("code",null,"false",-1),g=e("ul",null,[e("li",null,[o("仅在以下版本（或更新版本）的操作系统中可用: "),e("ul",null,[e("li",null,"Windows 10 (1604)"),e("li",null,"Mac OS 10.11 / iOS 9"),e("li",null,"Linux 3.16：系统已默认开启，无需配置。"),e("li",null,"FreeBSD 10.3")])])],-1),y=e("code",null,"tcpFastOpenQueueLength",-1),C={href:"https://zh.wikipedia.org/wiki/TCP%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"4096",-1),T=c("<blockquote><p><code>tproxy</code>: &quot;redirect&quot; | &quot;tproxy&quot; | &quot;off&quot;</p></blockquote><p>是否开启透明代理（仅适用于 Linux）。</p><ul><li><code>&quot;redirect&quot;</code>：使用 Redirect 模式的透明代理。支持 TCP 和 UDP 连接。</li><li><code>&quot;tproxy&quot;</code>：使用 TProxy 模式的透明代理。支持 TCP 和 UDP 连接。</li><li><code>&quot;off&quot;</code>：关闭透明代理。</li></ul><p>透明代理需要 Root 或 CAP_NET_ADMIN 权限。</p>",4),x={class:"custom-container tip"},E=e("p",{class:"custom-container-title"},"TIP",-1),P=e("code",null,"followRedirect",-1),L=e("code",null,"sockopt.tproxy",-1),O=e("code",null,"sockopt.tproxy",-1),A=e("code",null,'"redirect"',-1),I=e("blockquote",null,[e("p",null,[e("code",null,"tcpKeepAliveInterval"),o(": number")])],-1),N=e("p",null,"TCP 保持活跃的数据包的发送间隔，以秒为单位（仅适用于 Linux）。",-1),R=e("p",null,"0 代表保持默认值。",-1),j=e("blockquote",null,[e("p",null,[e("code",null,"bindToDevice"),o(": string")])],-1),F=e("p",null,"将连接绑定到指定的网络设备（仅适用于 Linux）。",-1);function w(B,V){const n=l("RouterLink"),a=l("ExternalLinkIcon");return p(),u("div",null,[k,r(' 传输层安全协议名称，支持的选项有 `"none"` 表示不使用传输层安全（默认值），`"tls"` 表示使用 [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security)。 '),q,_,b,e("ul",null,[e("li",null,[t(n,{to:"/v5/config/stream/kcp.html"},{default:s(()=>[o("mKCP")]),_:1})]),e("li",null,[t(n,{to:"/v5/config/stream/tcp.html"},{default:s(()=>[o("TCP")]),_:1})]),e("li",null,[t(n,{to:"/v5/config/stream/websocket.html"},{default:s(()=>[o("WebSocket")]),_:1})]),e("li",null,[t(n,{to:"/v5/config/stream/grpc.html"},{default:s(()=>[o("gRPC")]),_:1})]),e("li",null,[t(n,{to:"/v5/config/stream/quic.html"},{default:s(()=>[o("QUIC")]),_:1})])]),h,e("p",null,[o("是否启用 "),e("a",m,[o("TCP Fast Open"),t(a)]),o("。当其值为 "),f,o(" 时，强制开启 TFO；当其值为 "),v,o(" 时，强制关闭 TFO；当此项不存在时，使用系统默认设置。可用于入站出站连接。")]),g,e("blockquote",null,[e("p",null,[y,o(": number 入站连接的 "),e("a",C,[o("TCP Fast Open"),t(a)]),o(" 队列长度，默认值为 "),S,o("，仅在 Linux 中可用。")])]),T,e("div",x,[E,e("p",null,[o("当 "),t(n,{to:"/v5/config/proxy/dokodemo.html"},{default:s(()=>[o("Dokodemo-door")]),_:1}),o(" 中指定了 "),P,o("，且 "),L,o(" 为空时，"),O,o(" 的值会被设为 "),A,o("。")])]),I,N,R,j,F])}const D=i(d,[["render",w],["__file","stream.html.vue"]]);export{D as default};
