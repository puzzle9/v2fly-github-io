import{_ as a,r as l,o as s,c as r,a as e,d as t,w as i,b as c,e as n}from"./app.62347b2e.js";const d={},p=n(`<h1 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h1><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;transport&quot;</span><span class="token operator">:</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;transportSettings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;security&quot;</span><span class="token operator">:</span><span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;securitySettings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>transport</code>: name of <code>&lt;transport&gt;</code></p></blockquote><blockquote><p><code>transportSettings</code>: settings of <code>&lt;transport&gt;</code></p></blockquote><blockquote><p><code>security</code>: name of <code>&lt;security&gt;</code></p></blockquote><p>It has to be one of supported Security Protocol.</p><blockquote><p><code>securitySettings</code>: settings of <code>&lt;security&gt;</code></p></blockquote><blockquote><p><code>socketSettings</code>: <a href="#SocketConfigObject">SocketConfigObject</a></p></blockquote><h3 id="supported-streams" tabindex="-1"><a class="header-anchor" href="#supported-streams" aria-hidden="true">#</a> Supported Streams</h3>`,9),u=n('<h2 id="tls" tabindex="-1"><a class="header-anchor" href="#tls" aria-hidden="true">#</a> TLS</h2><ul><li>Name: <code>tls</code></li><li>Type: Security Protocol</li><li>ID: <code>security.tls</code></li></ul><blockquote><p><code>serverName</code>: string</p></blockquote><p>The server name indication domain name for TLS connection.</p><blockquote><p><code>nextProtocol</code> : [string]</p></blockquote><p>The ALPN for TLS connections.</p><blockquote><p><code>disableSystemRoot</code>: true | false</p></blockquote><p>Whether system level Certificate Authority Store should be trusted.</p><blockquote><p><code>pinnedPeerCertificateChainSha256</code> : [string]</p></blockquote><p>Pinned Peer Certificate Chain SHA256 Hash. Should be represented in base64 format.</p><blockquote><p><code>certificate</code>: [<a href="#CertificateObject">CertificateObject</a>]</p></blockquote><h1 id="certificateobject" tabindex="-1"><a class="header-anchor" href="#certificateobject" aria-hidden="true">#</a> CertificateObject</h1><blockquote><p><code>usage</code> : string</p></blockquote><p>The purpose of the certificate.</p><ul><li><code>&quot;ENCIPHERMENT&quot;</code>: The certificate is used for TLS authentication and encryption.</li><li><code>&quot;AUTHORITY_VERIFY&quot;</code>: The certificate is used to verify the remote TLS certificate. When using this option, the current certificate must be a CA certificate.</li><li><code>&quot;AUTHORITY_VERIFY_CLIENT&quot;</code>: : The certificate is used to verify the remote TLS client certificate. When using this option, the current certificate must be a CA certificate.</li><li><code>&quot;AUTHORITY_ISSUE&quot;</code>: The certificate is used to issue other certificates. When using this option, the current certificate must be a CA certificate.</li></ul><blockquote><p><code>Certificate</code>: string</p></blockquote><p>The Certificate file in PEM format.</p><blockquote><p><code>Key</code>: string</p></blockquote><p>The Certificate private key file in PEM format.</p><blockquote><p><code>certificateFile</code>: string</p></blockquote><p>The path for the Certificate file.</p><blockquote><p><code>keyFile</code>: string</p></blockquote><p>The path for the Certificate private key file.</p><h2 id="utls" tabindex="-1"><a class="header-anchor" href="#utls" aria-hidden="true">#</a> uTLS</h2><ul><li>Name: <code>utls</code></li><li>Type: Security Protocol</li><li>ID: <code>security.utls</code></li></ul><p>uTLS is a fork of TLS aimed at trying to imitate the client hello fingerprint of popular TLS implementation to hide the client identity of a Go language program. (v5.2.0+)</p><p>It is only supports client mode and in certain transports. If you use it in a context where it is not supported, the process will crash.</p><p>uTLS is supported in the following transports:</p><ul><li>TCP</li><li>WebSocket</li></ul><p>When you are using uTLS in some transport, the APLN will be overridden for its correct function. It may be a slightly different fingerprint than specified.</p><blockquote><p><code>tlsConfig</code>: <a href="#TLS">TLSConfig</a></p></blockquote><p>The Embedded TLS Setting for uTLS connections. Only some of its field are effective.</p><p>Supported Fields:</p><ul><li>Certificate Authority Settings (allowInsecure is ignored)</li></ul><blockquote><p><code>imitate</code>: string</p></blockquote><p>The TLS client fingerprint to use for the uTLS connection.</p><ul><li><code>randomized</code></li><li><code>randomizedalpn</code></li><li><code>randomizednoalpn</code></li><li><code>firefox_auto</code></li><li><code>firefox_55</code></li><li><code>firefox_56</code></li><li><code>firefox_63</code></li><li><code>firefox_65</code></li><li><code>firefox_99</code></li><li><code>firefox_102</code></li><li><code>firefox_105</code></li><li><code>chrome_auto</code></li><li><code>chrome_58</code></li><li><code>chrome_62</code></li><li><code>chrome_70</code></li><li><code>chrome_72</code></li><li><code>chrome_83</code></li><li><code>chrome_87</code></li><li><code>chrome_96</code></li><li><code>chrome_100</code></li><li><code>chrome_102</code></li><li><code>ios_auto</code></li><li><code>ios_11_1</code></li><li><code>ios_12_1</code></li><li><code>ios_13</code></li><li><code>ios_14</code></li><li><code>android_11_okhttp</code></li><li><code>edge_auto</code></li><li><code>edge_85</code></li><li><code>edge_106</code></li><li><code>safari_auto</code></li><li><code>safari_16_0</code></li><li><code>360_auto</code></li><li><code>360_7_5</code></li><li><code>360_11_0</code></li><li><code>qq_auto</code></li><li><code>qq_11_1</code></li></ul><blockquote><p><code>noSNI</code>: bool</p></blockquote><p>Do not send Server Name Indication in the client hello. This may result in failed connection.</p>',39);function f(h,m){const o=l("RouterLink");return s(),r("div",null,[p,e("ul",null,[e("li",null,[t(o,{to:"/en_US/v5/config/stream/websocket.html"},{default:i(()=>[c("WebSocket")]),_:1})]),e("li",null,[t(o,{to:"/en_US/v5/config/stream/kcp.html"},{default:i(()=>[c("mKCP")]),_:1})]),e("li",null,[t(o,{to:"/en_US/v5/config/stream/tcp.html"},{default:i(()=>[c("tcp")]),_:1})])]),u])}const k=a(d,[["render",f],["__file","stream.html.vue"]]);export{k as default};
