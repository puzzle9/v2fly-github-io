import{_ as e,o,c as t,e as n}from"./app.5a12ac33.js";const i={},a=n(`<h1 id="vlite" tabindex="-1"><a class="header-anchor" href="#vlite" aria-hidden="true">#</a> VLite</h1><p>VLite is a packet acceleration, protection, stabilization, and forwarding protocol.</p><p>It is designed for UDP based traffic with a focus on Peer to Peer applications. It does not support TCP traffic proxying.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Use router to send only UDP Packet Addr traffic to VLite. Example is shown below:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&quot;router&quot;: {
    &quot;domainStrategy&quot;: &quot;AsIs&quot;,
    &quot;rule&quot;: [
      {
        &quot;tag&quot;: &quot;vlite&quot;,
        &quot;domain&quot;: [
          {
            &quot;type&quot;:&quot;RootDomain&quot;,
            &quot;value&quot;: &quot;packet-addr.v2fly.arpa&quot;
          }
        ]
      }
    ]
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="vlite-udp-outbound" tabindex="-1"><a class="header-anchor" href="#vlite-udp-outbound" aria-hidden="true">#</a> VLite UDP Outbound</h2><ul><li>Name: <code>vliteu</code></li><li>Type: Outbound Protocol</li><li>ID: <code>outbound.vliteu</code></li></ul><blockquote><p><code>address</code>: string</p></blockquote><p>The server address.</p><blockquote><p><code>port</code>: number</p></blockquote><p>The server port number.</p><blockquote><p><code>password</code>: string</p></blockquote><p>The password. Need to be same on corresponding server.</p><blockquote><p><code>scramblePacket</code>: true | false</p></blockquote><p>Whether to enable packet scrambling. Need to be the same on the corresponding server.</p><p>This will hide the data packet&#39;s DTLS signature so that looks like unknown traffic once the handshake is finished.</p><blockquote><p><code>enableFec</code>: true | false</p></blockquote><p>Whether to enable forward error correction. Need to be the same on the corresponding server.</p><p>This will instruct vlite to consume more traffic to compensate for packet loss.</p><blockquote><p><code>enableStabilization</code>: true | false</p></blockquote><p>Whether to enable unified connection stabilization. Need to be the same on the corresponding server.</p><p>This will instruct vlite to stabilise connections actively by reincarnating broken connections by connecting to the server again and recovering connection status when the connection is interrupted.</p><blockquote><p><code>enableRenegotiation</code>: true | false</p></blockquote><p>Whether to enable unified connection stabilization protocol renegotiation. Need to be the same on the corresponding server.</p><p>This will instruct vlite to stabilise by renegotiating stateful protocols while keeping underlying payload connections intact.</p><blockquote><p><code>handshakeMaskingPaddingSize</code>: number</p></blockquote><p>Whether to mask unified connection stabilization handshake so it appears as random data. Recommended to be the same on the corresponding server.</p><p>Write a number to define the packet length to pad the handshake message to.</p><h2 id="vlite-udp-inbound" tabindex="-1"><a class="header-anchor" href="#vlite-udp-inbound" aria-hidden="true">#</a> VLite UDP Inbound</h2><ul><li>Name: <code>vliteu</code></li><li>Type: Inbound Protocol</li><li>ID: <code>inbound.vliteu</code></li></ul><blockquote><p><code>password</code>: string</p></blockquote><p>The password. Need to be same on corresponding client.</p><blockquote><p><code>scramblePacket</code>: true | false</p></blockquote><p>Whether to enable packet scrambling. Need to be the same on the corresponding client.</p><p>This will hide the data packet&#39;s DTLS signature so that looks like unknown traffic once the handshake is finished.</p><blockquote><p><code>enableFec</code>: true | false</p></blockquote><p>Whether to enable forward error correction. Need to be the same on the corresponding client.</p><p>This will instruct vlite to consume more traffic to compensate for packet loss.</p><blockquote><p><code>enableStabilization</code>: true | false</p></blockquote><p>Whether to enable unified connection stabilization. Need to be the same on the corresponding client.</p><p>This will instruct vlite to stabilise connections actively by reincarnating broken connections by connecting to the server again and recovering connection status when the connection is interrupted.</p><blockquote><p><code>enableRenegotiation</code>: true | false</p></blockquote><p>Whether to enable unified connection stabilization protocol renegotiation. Need to be the same on the corresponding client.</p><p>This will instruct vlite to stabilise by renegotiating stateful protocols while keeping underlying payload connections intact.</p><blockquote><p><code>handshakeMaskingPaddingSize</code>: number</p></blockquote><p>Whether to mask unified connection stabilization handshake so it appears as random data. Recommended to be the same on the corresponding client.</p><p>Write a number to define the packet length to pad the handshake message to.</p>`,46),c=[a];function s(r,l){return o(),t("div",null,c)}const p=e(i,[["render",s],["__file","vlite.html.vue"]]);export{p as default};
