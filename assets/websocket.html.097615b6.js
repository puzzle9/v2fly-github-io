import{_ as p,r as s,o as r,c as l,a as e,b as o,d as n,w as d,e as a}from"./app.50ec1cdd.js";const i={},u=a(`<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h1><p>使用标准的 WebSocket 来传输数据。WebSocket 连接可以被其它 HTTP 服务器（如 Nginx）分流，也可以被 VLESS fallbacks path 分流。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Websocket 会识别 HTTP 请求的 X-Forwarded-For 头来覆写流量的源地址，优先级高于 PROXY protocol。</p></div><h2 id="websocketobject" tabindex="-1"><a class="header-anchor" href="#websocketobject" aria-hidden="true">#</a> WebSocketObject</h2><p><code>WebSocketObject</code> 对应传输配置的 <code>wsSettings</code> 项。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;acceptProxyProtocol&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Host&quot;</span><span class="token operator">:</span> <span class="token string">&quot;v2ray.com&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;maxEarlyData&quot;</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token property">&quot;useBrowserForwarding&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;earlyDataHeaderName&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>acceptProxyProtocol</code>: true | false</p></blockquote><p>v4.27.1+，仅用于 inbound，是否接收 PROXY protocol，默认值为 <code>false</code>。填写 <code>true</code> 时，最底层 TCP 连接建立后，请求方必须先发送 PROXY protocol v1 或 v2，否则连接会被关闭。</p>`,8),k={href:"https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt",target:"_blank",rel:"noopener noreferrer"},b=e("strong",null,"若你不了解它，请先忽略该项",-1),v=a("<blockquote><p><code>path</code> string</p></blockquote><p>WebSocket 所使用的 HTTP 协议路径，默认值为 <code>&quot;/&quot;</code>。</p><blockquote><p><code>headers</code>: map {string: string}</p></blockquote><p>自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。默认值为空。</p><blockquote><p><code>maxEarlyData</code>: number</p></blockquote><p>所要发送的前置数据的最长长度。用于减少连接建立的时间。(v4.37.0+)</p><p>数据会以 Base64 RawURLEncoding 的形式附加在 path 之后，转发时需要根据前缀进行匹配。</p><p>如果设置 <code>earlyDataHeaderName</code> 则会将前置数据放置于该 HTTP 头。(v4.39.0+)</p><p>对于接收端，设置为任何非 0 数值都代表启用前置数据支持。</p><blockquote><p><code>useBrowserForwarding</code>: true | false</p></blockquote><p>是否启用浏览器转发。如果启用浏览器转发，相应的 WebSockets 连接就会经过浏览器转发模块进行转发后再发送至互联网。(v4.37.0+)</p><p>v4.37.0+ 服务器端程序会自动适配客户端的浏览器转发功能，无需额外设置。</p><p>只兼容基于基于路径的前置数据或者 HTTP 头的名字为 &quot;Sec-WebSocket-Protocol&quot; 的启用基于 HTTP 头的前置数据。</p>",13),m=e("blockquote",null,[e("p",null,[e("code",null,"earlyDataHeaderName"),o(" : string")])],-1),h=e("p",null,"发送的前置数据的 HTTP 头的名字，设置后启用基于 HTTP 头的前置数据。如果留空则使用基于路径的前置数据。(v4.39.0+)",-1),q=e("p",null,'当且仅当 HTTP 头的名字为 "Sec-WebSocket-Protocol" 时可以启用基于 HTTP 头的前置数据浏览器转发功能。',-1),_=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"TIP"),e("p",null,"V2Ray 的 WebSocket 前置数据实现已经完成与其他项目的兼容，正确设置后可以连接其他实现的服务器端。"),e("p",null,"其他项目的客户端可能无法连接 V2Ray 服务器端。")],-1);function T(P,w){const t=s("ExternalLinkIcon"),c=s("RouterLink");return r(),l("div",null,[u,e("p",null,[e("a",k,[o("PROXY protocol"),n(t)]),o(" 专用于传递请求的真实来源 IP 和端口，"),b,o("。常见的反代软件（如 HAProxy、Nginx）都可以配置发送它，VLESS fallbacks xver 也可以发送它。")]),v,e("p",null,[o("相关配置请参考浏览器转发模块文档。"),n(c,{to:"/config/browserforwarder.html"},{default:d(()=>[o("BrowserForwarderObject")]),_:1})]),m,h,q,_])}const g=p(i,[["render",T],["__file","websocket.html.vue"]]);export{g as default};
